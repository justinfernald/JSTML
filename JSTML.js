const htmlTags = [
    "a",
    "abbr",
    "address",
    "area",
    "article",
    "aside",
    "audio",
    "b",
    "base",
    "bdi",
    "bdo",
    "blockquote",
    "body",
    "br",
    "button",
    "canvas",
    "caption",
    "cite",
    "code",
    "col",
    "colgroup",
    "data",
    "datalist",
    "dd",
    "del",
    "details",
    "dfn",
    "dialog",
    "div",
    "dl",
    "dt",
    "em",
    "embed",
    "fieldset",
    "figcaption",
    "figure",
    "footer",
    "form",
    "h1",
    "h2",
    "h3",
    "h4",
    "h5",
    "h6",
    "head",
    "header",
    "hgroup",
    "hr",
    "html",
    "i",
    "iframe",
    "img",
    "input",
    "ins",
    "kbd",
    "label",
    "legend",
    "li",
    "link",
    "main",
    "map",
    "mark",
    "menu",
    "meta",
    "meter",
    "nav",
    "noscript",
    "object",
    "ol",
    "optgroup",
    "option",
    "output",
    "p",
    "param",
    "picture",
    "pre",
    "progress",
    "q",
    "rp",
    "rt",
    "ruby",
    "s",
    "samp",
    "script",
    "section",
    "select",
    "slot",
    "small",
    "source",
    "span",
    "strong",
    "style",
    "sub",
    "summary",
    "sup",
    "table",
    "tbody",
    "td",
    "template",
    "textarea",
    "tfoot",
    "th",
    "thead",
    "time",
    "title",
    "tr",
    "track",
    "u",
    "ul",
    "var",
    "video",
    "wbr",
];

const events = {
    onClick: "click",
    onAbort: "abort",
    onAfterPrint: "afterprint",
    onAnimationEnd: "animationend",
    onAnimationIteration: "animationiteration",
    onAnimationStart: "animationstart",
    onBeforePrint: "beforeprint",
    onBeforeUnload: "beforeunload",
    onBlur: "blur",
    onCanPlay: "canplay",
    onCanPlayThrough: "canplaythrough",
    onChange: "change",
    onClick: "click",
    onContextMenu: "contextmenu",
    onCopy: "copy",
    onCut: "cut",
    onDblClick: "dblclick",
    onDoubleClick: "dblclick",
    onDrag: "drag",
    onDragEnd: "dragend",
    onDragEnter: "dragenter",
    onDragLeave: "dragleave",
    onDragOver: "dragover",
    onDragStart: "dragstart",
    onDrop: "drop",
    onDurationChange: "durationchange",
    onEnded: "ended",
    onError: "error",
    onFocus: "focus",
    onFocusIn: "focusin",
    onFocusOut: "focusout",
    onFullScreenChange: "fullscreenchange",
    onFullScreenError: "fullscreenerror",
    onHashChange: "hashchange",
    onInput: "input",
    onInvalid: "invalid",
    onKeyDown: "keydown",
    onKeyPress: "keypress",
    onKeyUp: "keyup",
    onLoad: "load",
    onLoadedData: "loadeddata",
    onLoadedMetadata: "loadedmetadata",
    onLoadStart: "loadstart",
    onMessage: "message",
    onMouseDown: "mousedown",
    onMouseEnter: "mouseenter",
    onMouseLeave: "mouseleave",
    onMouseMove: "mousemove",
    onMouseOver: "mouseover",
    onMouseOut: "mouseout",
    onMouseUp: "mouseup",
    onOffline: "offline",
    onOnline: "online",
    onOpen: "open",
    onPageHide: "pagehide",
    onPageShow: "pageshow",
    onPaste: "paste",
    onPause: "pause",
    onPlay: "play",
    onPlaying: "playing",
    onProgress: "progress",
    onRateChange: "ratechange",
    onResize: "resize",
    onReset: "reset",
    onScroll: "scroll",
    onSearch: "search",
    onSeeked: "seeked",
    onSeeking: "seeking",
    onSelect: "select",
    onShow: "show",
    onStalled: "stalled",
    onSubmit: "submit",
    onSuspend: "suspend",
    onTimeUpdate: "timeupdate",
    onToggle: "toggle",
    onTouchCancel: "touchcancel",
    onTouchEnd: "touchend",
    onTouchMove: "touchmove",
    onTouchStart: "touchstart",
    onTransitionEnd: "transitionend",
    onUnload: "unload",
    onVolumeChange: "volumechange",
    onWaiting: "waiting",
    onWheel: "wheel"
}

htmlTags.forEach((tag) => {
    exports[tag] = (attributes, ...children) => {
        return {
            _type: "jstml",
            attributes,
            children,
            toDOM: () => {
                let element = document.createElement(tag);
                if (attributes._type == "jstml")
                    element.appendChild(attributes.toDOM());
                else if (typeof attributes == "string")
                    element.appendChild(document.createTextNode(attributes));
                else
                    for ([key, value] of Object.entries(attributes)) {
                        if (events[key]) {
                            element.addEventListener(events[key], value)
                        } else
                            element.setAttribute(key, value);
                    }
                for (let child of children)
                    element.appendChild(
                        typeof child == "string"
                            ? document.createTextNode(child)
                            : child.toDOM()
                    );
                return element;
            },
            toHTML: () => {
                console.log("hi");
            },
        };
    };
});
